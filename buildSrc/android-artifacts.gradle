apply from: rootProject.file('buildSrc/publish-config.gradle')
apply plugin: 'maven-publish'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}
version = version
//group = GROUP

group = POM_GROUP_ID
//name = POM_ARTIFACT_ID

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}

publishing {
    publications {
        Titan(MavenPublication) {
            groupId = POM_GROUP_ID
            artifactId = POM_ARTIFACT_ID
            version = version
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.archivesBaseName}-release.aar")
            artifact androidJavadocsJar
            artifact androidSourcesJar


            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig

                def dependenciesNode = root.appendNode('dependencies')

                def deps = configurations.compile.allDependencies + configurations.implementation.allDependencies
                // List all compile dependencies and write to POM
                deps.each { Dependency dep ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', 'compile')

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        def exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusionNode = exclusionsNode.appendNode('exclusion')
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url uri(getRepositoryUrl())
            if (needCredentials()) {
                credentials {
                    username getRepositoryUsername()
                    password getRepositoryPassword()
                }
            }
        }
    }
}
